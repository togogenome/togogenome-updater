#!/usr/bin/env ruby

require 'json'
require 'fileutils'

ISQL = '/data/store/virtuoso7.1/bin/isql 20711 dba dba'
ISQL_OPT = 'VERBOSE=OFF BANNER=OFF PROMPT=OFF ECHO=OFF BLOBS=ON ERRORS=stderr'
TOGO_DIR = '/data/store/rdf/togogenome'
BASE_DIR = "#{TOGO_DIR}/bin/text_search"
QUERY_DIR = "#{BASE_DIR}/sparql/organism"
PREPARE_DIR = "#{TOGO_DIR}/text_search/current/prepare/organism"
OUTPUT_DIR = "#{TOGO_DIR}/text_search/current/organism"

#query name
GENOME_CROSS_REFERENCES = 'genome_cross_references'
ORGANISM_CROSS_REFERENCES = 'organism_cross_references'
ORGANISM_NAMES = 'organism_names'
ORGANISM_PHENOTYPE = 'organism_phenotype'
ORGANISM_CULTURE_COLLECTIONS = 'organism_culture_collections'
ORGANISM_PATHOGEN_INFORMATION = 'organism_pathogen_information'
#ORGANISM_MEDIUM_INFORMATION = 'organism_medium_information'

def query(query_name)
  STDERR.puts "Start: query [#{query_name}]"
  query_file = "#{QUERY_DIR}/#{query_name}.rq"
  output_file = "#{PREPARE_DIR}/text/#{query_name}.txt"
  system(%Q[#{ISQL} #{ISQL_OPT} < #{query_file} > #{output_file}])
  STDERR.puts "End: query [#{query_name}]"
end

def to_utf(str)
  str.force_encoding('UTF-8')
end

def create_prepare_json(query_name)
  STDERR.puts "Start: create prepare json [#{query_name}]"
  input_file = "#{PREPARE_DIR}/text/#{query_name}.txt"
  output_file  = "#{PREPARE_DIR}/json/#{query_name}.json"
  File.open("#{input_file}") do |f|
    result_hash = {}
    while line  = f.gets
      taxonomy_obj_mapping(result_hash, line, query_name)
    end
    File.open("#{output_file}", 'w') do |file|
      file.puts JSON.pretty_generate(result_hash)
    end
  end
  STDERR.puts "End: create prepare json [#{query_name}]"
end

def taxonomy_obj_mapping(result_hash, line, query_name)
  return line.start_with?('http://identifiers.org/taxonomy/') unless
  line.force_encoding('UTF-8')
  line = line.encode("UTF-16BE", "UTF-8", :invalid => :replace, :undef => :replace, :replace => '?').encode("UTF-8")
  columns = line.split('^@')
  tax_no = columns[0].strip.gsub('http://identifiers.org/taxonomy/','')

  case query_name
  when GENOME_CROSS_REFERENCES 
    values = { :tax_id => to_utf(tax_no),
               :refseq_definitions => to_utf(columns[1].strip),
               :bioproject_ids => to_utf(columns[2].strip),
               :refseq_ids => to_utf(columns[3].strip),
               :xref_ids => to_utf(columns[4].strip)}
  when ORGANISM_CROSS_REFERENCES
    values = { :tax_id => to_utf(tax_no),
               :gold_ids => to_utf(columns[1].strip)}
  when ORGANISM_NAMES
    values = { :tax_id => to_utf(tax_no),
               :name => to_utf(columns[1].strip),
               :synonyms => to_utf(columns[2].strip)}
  when ORGANISM_PHENOTYPE
    values = { :tax_id => to_utf(tax_no),
               :phenotype_values => to_utf(columns[1].strip)}
  when ORGANISM_CULTURE_COLLECTIONS 
    values = { :tax_id => to_utf(tax_no),
               :strain_numbers => to_utf(columns[1].strip),
               :strain_names => to_utf(columns[2].strip),
               :isolations => to_utf(columns[3].strip),
               :meo_labels => to_utf(columns[4].strip),
               :applications => to_utf(columns[5].strip),
               :up_alternative_names => to_utf(columns[6].strip)}
  when ORGANISM_PATHOGEN_INFORMATION
    values = { :tax_id => to_utf(tax_no),
               :organismNameSet => to_utf(columns[1].strip),
               :diseaseNameSet => to_utf(columns[2].strip),
               :infectiousTypes => to_utf(columns[3].strip),
               :strainTypes => to_utf(columns[4].strip)}
  end
  result_hash[tax_no] = values
end

def cretate_idx (stanza_name, query_names)
  output_file  = "#{OUTPUT_DIR}/#{stanza_name}.json"

end

#query(GENOME_CROSS_REFERENCES)
#create_prepare_json(GENOME_CROSS_REFERENCES)

#query(ORGANISM_CROSS_REFERENCES)
#create_prepare_json(ORGANISM_CROSS_REFERENCES)

#query(ORGANISM_NAMES)
#create_prepare_json(ORGANISM_NAMES)

#query(ORGANISM_PHENOTYPE)
#create_prepare_json(ORGANISM_PHENOTYPE)

#query(ORGANISM_CULTURE_COLLECTIONS)
#create_prepare_json(ORGANISM_CULTURE_COLLECTIONS)

#query(ORGANISM_PATHOGEN_INFORMATION)
#create_prepare_json(ORGANISM_PATHOGEN_INFORMATION)
