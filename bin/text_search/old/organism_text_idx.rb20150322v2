#!/usr/bin/env ruby

require 'httpclient'
require 'json'
require 'erb'
require 'fileutils'
require 'tempfile'
require "../sparql.rb"
require 'ltsv'

class OrganismTextSearch
  def initialize(endpoint)
    @endpoint = SPARQL.new(endpoint)
    @base_dir = File.dirname(__FILE__)
  end

  def tax_id_list()
    sparql = "#{@base_dir}/sparql/organism/get_tax_list.rq"
    result = ""

    @endpoint.query(File.read(sparql), :format => 'json') do |json|
      result += json
    end

    results = JSON.parse(result)["results"]["bindings"]
    results.map do |entry|
      entry['tax_id']['value']
    end
  end
  def genome_cross_references(tax_list)
    organism_data = {}
    template = File.read("#{@base_dir}/sparql/organism/genome_cross_references.erb")
    sparql = ERB.new(template).result(binding)
    result = ""
    @endpoint.query(sparql, :format => 'json') do |json|
      result += json
    end
    results = JSON.parse(result)["results"]["bindings"]
    results.each do |entry|
      tax_no = entry['tax_id']['value'].split('/').last
      values = {:tax_no => tax_no,
                :refseq_definitions => entry['refseq_definitions']['value'],
                :bioproject_ids => entry['bioproject_ids']['value'],
                :refseq_ids => entry['refseq_ids']['value'],
                :xref_ids => entry['xref_ids']['value']}
      organism_data[tax_no] = values
    end
    tax_list.each do |tax_id|
      tax_no = tax_id.split('/').last
      if organism_data[tax_no] == nil
        values = {:tax_no => tax_no,
                :refseq_definitions => '',
                :bioproject_ids => '',
                :refseq_ids => '',
                :xref_ids => ''}
        organism_data[tax_no] = values
      end
    end
    organism_data
  end
  def organism_cross_references(tax_list)
    organism_data = {}
    template = File.read("#{@base_dir}/sparql/organism/organism_cross_references.erb")
    sparql = ERB.new(template).result(binding)
    result = ""
    @endpoint.query(sparql, :format => 'json') do |json|
      result += json
    end
    results = JSON.parse(result)["results"]["bindings"]
    results.each do |entry|
      tax_no = entry['tax_id']['value'].split('/').last
      values = {:tax_no => tax_no,
                :gold_ids => entry['gold_ids']['value']}
      organism_data[tax_no] = values
    end
    tax_list.each do |tax_id|
      tax_no = tax_id.split('/').last
      if organism_data[tax_no] == nil
        values = {:tax_no => tax_no, :gold_ids => ''}
        organism_data[tax_no] = values
      end
    end
    organism_data
  end
  def organism_names(tax_list)
    organism_data = {}
    template = File.read("#{@base_dir}/sparql/organism/organism_name.rq")
    sparql = ERB.new(template).result(binding)
    result = ""
    @endpoint.query(sparql, :format => 'json') do |json|
      result += json
    end
    results = JSON.parse(result)["results"]["bindings"]
    results.each do |entry|
      tax_no = entry['tax_id']['value'].split('/').last
      values = {:tax_no => tax_no,
                :name => entry['name']['value'],
                :synonyms => entry['synonyms']['value']}
      organism_data[tax_no] = values
    end
    tax_list.each do |tax_id|
      tax_no = tax_id.split('/').last
      if organism_data[tax_no] == nil
        values = {:tax_no => tax_no, :name => '', :synonyms => ''}
        organism_data[tax_no] = values
      end
    end
    organism_data
  end
  def organism_phenotype(tax_list)
    organism_data = {}
    template = File.read("#{@base_dir}/sparql/organism/organism_phenotype.rq")
    sparql = ERB.new(template).result(binding)
    result = ""
    @endpoint.query(sparql, :format => 'json') do |json|
      result += json
    end
    results = JSON.parse(result)["results"]["bindings"]
    results.each do |entry|
      tax_no = entry['tax_id']['value'].split('/').last
      values = {:tax_no => tax_no,
                :phenotypes => entry['phenotype_values']['value']}
      organism_data[tax_no] = values
    end
    tax_list.each do |tax_id|
      tax_no = tax_id.split('/').last
      if organism_data[tax_no] == nil
        values = {:tax_no => tax_no, :phenotypes => ''}
        organism_data[tax_no] = values
      end
    end
    organism_data
  end
  def organism_culture_collections(tax_list)
    organism_data = {}
    template = File.read("#{@base_dir}/sparql/organism/organism_culture_collections.rq")
    sparql = ERB.new(template).result(binding)
    result = ""
    @endpoint.query(sparql, :format => 'json') do |json|
      result += json
    end
    results = JSON.parse(result)["results"]["bindings"]
    results.each do |entry|
      tax_no = entry['tax_id']['value'].split('/').last
      values = {:tax_no => tax_no,
                :strain_numbers => entry['strain_numbers']['value'],
                :strain_names => entry['strain_names']['value'],
                :culture_isolations => entry['culture_isolations']['value'],
                :culture_environments => entry['culture_environments']['value'],
                :culture_applications => entry['culture_applications']['vaeue'],
                :other_cultures => entry['other_cultures']['value']
               }
      organism_data[tax_no] = values
    end
    tax_list.each do |tax_id|
      tax_no = tax_id.split('/').last
      if organism_data[tax_no] == nil
        values = {:tax_no => tax_no, :strain_numbers => '', :strain_names => '', :culture_isolations => '',
                  :culture_environments => '', :culture_applications => '', :other_cultures => '' }
        organism_data[tax_no] = values
      end
    end
    organism_data
  end
  def organism_pathogen_information(tax_list)
    organism_data = {}
    template = File.read("#{@base_dir}/sparql/organism/organism_pathogen_information.rq")
    sparql = ERB.new(template).result(binding)
    result = ""
    @endpoint.query(sparql, :format => 'json') do |json|
      result += json
    end
    results = JSON.parse(result)["results"]["bindings"]
    results.each do |entry|
      tax_no = entry['tax_id']['value'].split('/').last
      values = {:tax_no => tax_no,
                :pathogen_organism_names => entry['pathogen_organism_names']['value'],
                :disease_names => entry['disease_names']['value'],
                :infectious_types => entry['infectious_types']['value'],
                :pathogen_strain_types => entry['pathogen_strain_types']['value']
               }
      organism_data[tax_no] = values
    end
    tax_list.each do |tax_id|
      tax_no = tax_id.split('/').last
      if organism_data[tax_no] == nil
        values = {:tax_no => tax_no, :pathogen_strain_names => '', :disease_names => '', :infectious_types => '', :pathogen_strain_types => ''}
        organism_data[tax_no] = values
      end
    end
    organism_data
  end
  def output_json(tax_list, text_data)
    #result_hash = {}
    result_array = []
    tax_list.each do |tax_id|
      #next if tax_id != "http://identifiers.org/taxonomy/1148"
      tax_no = tax_id.split("/").last
      text_data_hash = {:tax_no => tax_no}
      text_data.each do |stanza_text_data|
        text_data_hash.merge!(stanza_text_data[tax_no])
      end
     # result_hash[tax_no] = text_data_hash
      result_array.push(text_data_hash)
    end
    #puts JSON.pretty_generate(result_hash)
    puts JSON.pretty_generate(result_array)
  end
end
organism_search = OrganismTextSearch.new(ARGV[0])
tax_list = organism_search.tax_id_list()
$stderr.puts("tax_id_size: #{tax_list.size}")
text_data = []
text_data.push(organism_search.genome_cross_references(tax_list))
$stderr.puts("done genome_cross_references")
text_data.push(organism_search.organism_cross_references(tax_list))
$stderr.puts("done organism_cross_references")
text_data.push(organism_search.organism_names(tax_list))
$stderr.puts("done organism_names")
text_data.push(organism_search.organism_phenotype(tax_list))
$stderr.puts("done organism_phenotype")
text_data.push(organism_search.organism_culture_collections(tax_list))
$stderr.puts("done organism_culture_collections")
text_data.push(organism_search.organism_pathogen_information(tax_list))
$stderr.puts("done organism_pathogen_information")
organism_search.output_json(tax_list, text_data)
