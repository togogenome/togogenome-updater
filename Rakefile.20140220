###
### TogoGenome update procedures
###

RDF_DIR = "/data/store/rdf"
GRAPH_NS = "http://togogenome.org"

#HTTP_GET = "curl -O"
#HTTP_GET = "wget"
HTTP_GET = "lftpget"

###
### Triple store
###

### Virtuoso7.1 open source

ISQL = "/data/store/virtuoso7.1/bin/isql 20711 dba dba"
ENDPOINT = "http://ep.dbcls.jp/sparql7.1"

### Virtuoso7 commercial (SSD)

#ISQL = "/ssd/virtuoso7/bin/isql 20801 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql"

### Virtuoso7 open source (develop/7; old)

#ISQL = "/data/store/virtuoso7os/bin/isql 20811 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7os"

### Virtuoso7 open source (stable/7)

#ISQL = "/data/store/virtuoso7/bin/isql 20821 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7"

### Virtuoso7 open source (stable/7) for internal use

#ISQL = "/data/store/virtuoso7/bin/isql 20831 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7dev"

### Virtuoso7 open source (stable/7) for update use

#ISQL = "/data/store/virtuoso7/bin/isql 20841 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7upd"

### Virtuoso7 open source (stable/7) for edge store

#ISQL = "/data/store/virtuoso7/bin/isql 20851 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7es"

### Virtuoso7 open source (stable/7) for update use (temporal)

#ISQL = "/data/store/virtuoso7/bin/isql 20871 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7upd2"

### Virtuoso7 open source (stable/7) slow

#ISQL = "/data/store/virtuoso7/bin/isql 20881 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7old"

### Virtuoso7 open source (stable/7) for test

#ISQL = "/data/store/virtuoso7tmp/bin/isql 20891 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7tmp"

### For test

#ISQL = "/data/store/virtuoso7os-devel/bin/isql 20861 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7os-devel"

#ISQL = "/data/store/virtuoso7os-stable/bin/isql 20871 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7os-stable"

#ISQL = "/data/store/virtuoso7os-devel-new/bin/isql 20881 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7os-devel-new"

#ISQL = "/data/store/virtuoso7os-stable-new/bin/isql 20891 dba dba"
#ENDPOINT = "http://ep.dbcls.jp/sparql7os-stable-new"


USAGE = <<"USAGE"

* Update Genomes

rake genomes:fetch             # Retrieve genomes/current/GENOME_REPORTS

* Update RefSeq

rake refseq:fetch release62    # Retrieve RefSeq entries to refseq/current
rake refseq:fetch_retry        # Re-retrieve missing RefSeq entries
rake refseq:prepare            # Prepare RefSeq RDF for TogoGenome
  => [:refseq2ttl, :refseq2up, :refseq2fasta, :refseq2jbrowse]
rake refseq:load 62            # Load Refseq to TogoGenome
  => [:load_refseq, :load_stats, :load_tgup, :load_tgtax]

* Update UniProt

rake uniprot:fetch 2013_11     # Retrieve UniProt RDF in ../uniprot/current
rake uniprot:prepare           # Prepare UniProt RDF for TogoGenome
  => [:rdf2taxon, :taxon2ttl, :copy]
rake load_uniprot 2013_11      # Load UniProt to TogoGenome

* Update ontologies

(prefix ontology: for each task)

* Update FALDO ontology

rake faldo:fetch               # Retrieve FALDO
rake faldo:load 20130530       # Load FALDO to TogoGenome

* Update Taxonomy ontology

rake taxonomy:fetch            # Retrieve NCBI taxdump files
rake taxonomy:prepare          # Convert taxdump files to taxonomy ontology
rake taxonomy:load 20130826    # Load Taxonomy ontology to TogoGenome

* Update OBO ontologies

rake obo_tax:fetch             # Retrieve NCBI taxonomy from OBO
rake obo_go:fetch              # Retrieve Gene Ontology
rake obo_so:fetch              # Retrieve Sequence Ontology

rake obo_tax:load 20130126     # Load NCBI taxonomy to TogoGenome
rake obo_go:load 20130615      # Load Gene Ontology to TogoGenome
rake obo_so:load 20110512      # Load Sequence Ontology to TogoGenome

* Update MEO/MPO/GMO/MCCV/PDO/GAZETTEER and LOD (GOLD/BRC)

rake meo:load 0.6              # Load MEO to TogoGenome
rake mpo:load 0.3              # Load MPO to TogoGenome
rake gmo:load 0.1b             # Load GMO to TogoGenome
rake mccv:load 0.92            # Load MCCV to TogoGenome
rake pdo:load 0.11             # Load PDO to TogoGenome
rake pdo:load_lod 20130902     # Load PDO_MAPPING to TogoGenome
rake csso:load 0.2             # Load CSSO to TogoGenome
rake gazetteer:load 20130906   # Load GAZETTEER to TogoGenome

rake brc:load 20130925         # Load BRC to TogoGenome
rake gold:load 20130827        # Load GOLD to TogoGenome

* Update EdgeStore

rake edgestore:check           # Check update status
rake edgestore:fetch           # Retrieve EdgeStore data
rake edgestore:load 20131021   # Load EdgeStore to TogoGenome

* Human

rake human:fetch               # Retrieve RefSeq human genome entries
rake human:prepare             # Convert RefSeq human entries to RDF
rake human:load GRCh37.p13     # Load Human RDF to TogoGenome

* Graphs

rake graph:list                # Show current graphs
rake graph:stat                # Show graph statistics
rake graph:drop name           # Delete graph <GRAPH_NS/graph/name>
rake graph:watch               # Show number of remaining files for loading

USAGE

###
### Methods
###

def set_name
  if ARGV.size > 1
    name = ARGV.last
    task name.to_sym  # do nothing, just to avoid "Don't know how to build task #{name}"
  else
    date = Time.now.strftime("%Y%m%d")
  end
  return name || date
end

def create_subdir(path, name)
  sh "mkdir -p #{path}/#{name}"
  return "#{path}/#{name}"
end

def link_current(path, name)
  sh "cd #{path}; ln -snf #{name} current"
end

def isql_create(graph, name)
  sleep 1
  time = Time.now.strftime("%Y%m%d-%H%M%S")
  path = "isql/#{time}-#{graph}-#{name}.isql"
  return path
end

def isql_write(file, line)
  file.puts "ECHOLN \"#{line}\";"
  file.puts line
end

def load_rdf(path, graph, name)
  isql = isql_create(graph, name)
  File.open(isql, "w") do |file|
    isql_write(file, "log_enable(3, 1);")
    #isql_write(file, "DB.DBA.RDF_LOAD_RDFXML_MT(file_to_string_output('#{path}'), '', '#{GRAPH_NS}/#{graph}/#{name}');")
    isql_write(file, "DB.DBA.RDF_LOAD_RDFXML_MT(file_to_string_output('#{path}'), '', '#{GRAPH_NS}/graph/#{graph}/');")
    isql_write(file, "checkpoint;")
  end
  sh "#{ISQL} #{isql}"
end

def load_ttl(path, graph, name)
  isql = isql_create(graph, name)
  File.open(isql, "w") do |file|
    isql_write(file, "log_enable(3, 1);")
    #isql_write(file, "DB.DBA.TTLP_MT(file_to_string_output('#{path}'), '', '#{GRAPH_NS}/#{graph}/#{name}');")
    #isql_write(file, "DB.DBA.TTLP_MT(file_to_string_output('#{path}'), '', '#{GRAPH_NS}/graph/#{graph}/');")
    #   1 - Single quoted and double quoted strings may with newlines.
    #   2 - Allows bnode predicates (but SPARQL processor may ignore them!).
    #   4 - Allows variables, but triples with variables are ignored.
    #   8 - Allows literal subjects, but triples with them are ignored.
    #  16 - Allows '/', '#', '%' and '+' in local part of QName ("Qname with path")
    #  32 - Allows invalid symbols between '<' and '>', i.e. in relative IRIs.
    #  64 - Relax TURTLE syntax to include popular violations.
    # 128 - Try to recover from lexical errors as much as it is possible.
    # 256 - Allows TriG syntax, thus loading data in more than one graph.
    # 512 - Allows loading N-quad dataset files with and optional context value to indicate provenance as detailed http://sw.deri.org/2008/07/n-quads
    # 81 = 64 + 16 + 1
    isql_write(file, "DB.DBA.TTLP_MT(file_to_string_output('#{path}'), '', '#{GRAPH_NS}/graph/#{graph}/', 81);")
    isql_write(file, "checkpoint;")
  end
  sh "#{ISQL} #{isql}"
end

def load_dir(path, pattern, graph, name)
  isql = isql_create(graph, name)
  File.open(isql, "w") do |file|
    isql_write(file, "log_enable(3, 1);")
    #isql_write(file, "ld_dir_all('#{path}', '#{pattern}', '#{GRAPH_NS}/#{graph}/#{name}');")
    isql_write(file, "ld_dir_all('#{path}', '#{pattern}', '#{GRAPH_NS}/graph/#{graph}/');")
    isql_write(file, "rdf_loader_run();")
    isql_write(file, "checkpoint;")
  end
  sh "#{ISQL} #{isql}"
end

def update_graph(graph, name)
  sparql = "sparql 
    PREFIX dct: <http://purl.org/dc/terms/>
    DELETE FROM <#{GRAPH_NS}/graph/> {
      <#{GRAPH_NS}/graph/#{graph}/> ?p ?o .
    }
    WHERE {
      GRAPH <#{GRAPH_NS}/graph/> {
        <#{GRAPH_NS}/graph/#{graph}/> ?p ?o .
      }
    }
    INSERT DATA INTO <#{GRAPH_NS}/graph/> {
      <#{GRAPH_NS}/graph/#{graph}/> dct:isVersionOf <#{GRAPH_NS}/graph/#{graph}/#{name}> .
    }
  ;"
  isql = isql_create(graph, name)
  File.open(isql, "w") do |file|
    isql_write(file, sparql)
  end
  sh "#{ISQL} #{isql}"
end

###
### Tasks
###

task :default => :usage

task :usage do
  puts USAGE
end

###
### Graph
###

namespace :graph do

  desc "Show current graphs"
  task :list do
    # sh "SPARQL_ENDPOINT='#{ENDPOINT}' sparql.rb query 'select distinct ?g where { graph ?g {?s ?p ?o} }'"
    sh "SPARQL_ENDPOINT='#{ENDPOINT}' sparql.rb query 'select * where { graph <#{GRAPH_NS}/graph/> {?s ?p ?o} } order by ?s'"
  end
  
  desc "Show graph statistics"
  task :stat do
    # sh "SPARQL_ENDPOINT='#{ENDPOINT}' sparql.rb query 'select (?s as ?symbolic_graph) (?g as ?current_graph) (?c as ?triples) where { graph <#{GRAPH_NS}/graph/> {?s ?p ?g} { select ?g (count(*) as ?c) where { graph ?g {?s1 ?p1 ?o1} } group by ?g } } order by ?s'"
    sparql = "sparql
#      select (?s as ?symbolic_graph) (?g as ?current_graph) (?c as ?triples)
      select (?s as ?graph_name) (?g as ?graph_version) (?c as ?triples)
      where {
        graph <#{GRAPH_NS}/graph/> {
          ?s ?p ?g
        }
        {
#          select ?g (count(*) as ?c)
#          where {
#            graph ?g {?s1 ?p1 ?o1}
#          } group by ?g
#        }
          select ?s (count(*) as ?c)
          where {
            graph ?s {?s1 ?p1 ?o1}
          } group by ?s
        }
      } order by ?s
    ;"
    isql = isql_create('stat', 'graph')
    File.open(isql, "w") do |file|
      isql_write(file, sparql)
    end
    sh "#{ISQL} #{isql}"
  end
  
  desc "Drop graph"
  task :drop do
    name = set_name
    isql = isql_create('drop', name)
    File.open(isql, "w") do |file|
      isql_write(file, "log_enable(3, 1);")
      isql_write(file, "sparql clear graph <#{GRAPH_NS}/graph/#{name}/>;")
    end
    sh "#{ISQL} #{isql}"
  end
  
#  desc "Load default graphs"
#  task :load_graph do
#    load_ttl("#{RDF_DIR}/togogenome/graph/graph.ttl", 'graph', nil)
#  end
  
  desc "Show number of remaining files for loading"
  task :watch do
    sh "echo 'select count(*) from DB.DBA.LOAD_LIST where ll_state = 0;' | #{ISQL}"
  end
end

###
### Ontologies
###

namespace :ontology do

#
# FALDO
#

namespace :faldo do
  desc "Retrieve FALDO"
  task :fetch do
    name = set_name
    path = create_subdir('ontology/faldo', name)
    sh "cd #{path}; wget http://biohackathon.org/resource/faldo -O faldo.ttl"
    link_current('ontology/faldo', name)
  end
  
  desc "Load FALDO to TogoGenome"
  task :load do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/ontology/faldo/current/faldo.ttl", 'faldo', name)
    update_graph('faldo', name)
  end
end

#
# Taxonomy (NCBI taxdump)
#

namespace :taxonomy do
  desc "Retrieve NCBI taxonomy from NCBI"
  task :fetch do
    name = set_name
    path = create_subdir('ontology/taxonomy', name)
    sh "cd #{path}; #{HTTP_GET} ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump.tar.gz"
    link_current('ontology/taxonomy', name)
  end
  
  desc "Prepare NCBI taxonomy for TogoGenome"
  task :prepare => [:taxdump2owl]
  
  #desc "Convert NCBI taxdump into OWL file"
  task :taxdump2owl do
    path = "ontology/taxonomy/current"
    sh "mkdir -p #{path}/taxdump"
    sh "cd #{path}; tar --directory=taxdump -xvf taxdump.tar.gz"
    sh "bin/taxdump2owl.rb #{path}/taxdump/nodes.dmp #{path}/taxdump/names.dmp #{path}/taxdump/merged.dmp #{path}/taxdump/citations.dmp > #{path}/taxonomy.owl 2> #{path}/taxcite.ttl"
  end
  
  desc "Load Taxonomy (NCBI) to TogoGenome"
  task :load do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/ontology/taxonomy/current/taxonomy.owl", 'taxonomy', name)
    load_ttl("#{RDF_DIR}/togogenome/ontology/taxonomy/current/taxcite.ttl", 'taxonomy', name)
    #load_dir("#{RDF_DIR}/togogenome/ontology/taxonomy/current", '*.owl', 'taxonomy', name)
    #load_dir("#{RDF_DIR}/togogenome/ontology/taxonomy/current", '*.ttl', 'taxonomy', name)
    update_graph('taxonomy', name)
  end
end

#
# Taxonomy (OBO)
#

namespace :obo_tax do
  desc "Retrieve NCBI taxonomy from OBO"
  task :fetch do
    name = set_name
    path = create_subdir('ontology/ncbitaxon', name)
    sh "cd #{path}; #{HTTP_GET} http://purl.obolibrary.org/obo/ncbitaxon.owl"
    link_current('ontology/ncbitaxon', name)
  end
  
  desc "Load NCBI taxonomy (OBO) to TogoGenome"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/ncbitaxon/current/ncbitaxon.owl", 'ncbitaxon', name)
    update_graph('ncbitaxon', name)
  end
end

#
# GO
#

namespace :obo_go do
  desc "Retrieve Gene Ontology"
  task :fetch do
    name = set_name
    path = create_subdir('ontology/go', name)
    sh "cd #{path}; #{HTTP_GET} http://purl.obolibrary.org/obo/go.owl"
    link_current('ontology/go', name)
  end
  
  desc "Load Gene Ontology to TogoGenome"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/go/current/go.owl", 'go', name)
    update_graph('go', name)
  end
end

#
# SO
#

namespace :obo_so do
  desc "Retrieve Sequence Ontology"
  task :fetch do
    name = set_name
    path = create_subdir('ontology/so', name)
    sh "cd #{path}; #{HTTP_GET} http://purl.obolibrary.org/obo/so.owl"
    link_current('ontology/so', name)
  end
  
  desc "Load Sequence Ontology to TogoGenome"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/so/current/so.owl", 'so', name)
    update_graph('so', name)
  end
end

#
# MEO
#

namespace :meo do
 desc "Load MEO to TogoGenome"
 task :load do
   name = set_name
   load_rdf("#{RDF_DIR}/togogenome/ontology/MEO/current/meo.owl", 'meo', name)
   update_graph('meo', name)
 end
end

#
# MPO
#

namespace :mpo do
  desc "Load MPO to TogoGenome"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/MPO/current/mpo.owl", 'mpo', name)
    update_graph('mpo', name)
  end
end

#
# MCCV
#

namespace :mccv do
  desc "Load MCCV to TogoGenome"
  task :load do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/ontology/MCCV/current/mccv.ttl", 'mccv', name)
    update_graph('mccv', name)
  end
end

#
# PDO
#

namespace :pdo do
  desc "Load PDO to TogoGenome"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/PDO/current/pdo.owl", 'pdo', name)
    update_graph('pdo', name)
  end

  desc "Load PDO_MAPPING to TogoGenome (rename to pdo_lod ?)"
  task :load_lod do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/ontology/PDO/current/mapping.ttl", 'pdo_mapping', name)
    update_graph('pdo_mapping', name)
  end
end

#
# CSSO
#

namespace :csso do
  desc "Load CSSO to TogoGenome (move to ontology/CSSO ?)"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/PDO/current/csso.owl", 'csso', name)
    update_graph('csso', name)
  end
end

#
# GAZETTEER
#

namespace :gazetteer do
  desc "Load GAZETTEER to TogoGenome"
  task :load do
    name = set_name
    load_rdf("#{RDF_DIR}/togogenome/ontology/GAZETTEER/current/gazetteer.owl", 'gazetteer', name)
    load_ttl("#{RDF_DIR}/togogenome/ontology/GAZETTEER/current/gazetteer_lonlat.ttl", 'gazetteer', name)
    update_graph('gazetteer', name)
  end
end

#
# BRC
#

namespace :brc do
  desc "Load BRC to TogoGenome"
  task :load do
    name = set_name
    load_dir("#{RDF_DIR}/togogenome/ontology/BRC/current", '*.ttl', 'brc', name)
    update_graph('brc', name)
  end
end

#
# GOLD
#

namespace :gold do
  # MEO/gold2ontology2.ttl
  # MPO/gold_all_mpo.ttl
  desc "Load GOLD to TogoGenome"
  task :load do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/ontology/GOLD/current/gold2meo.ttl", 'gold', name)
    load_ttl("#{RDF_DIR}/togogenome/ontology/GOLD/current/gold2mpo.ttl", 'gold', name)
    load_ttl("#{RDF_DIR}/togogenome/ontology/GOLD/current/gold2taxon.ttl", 'gold', name)
    load_dir("#{RDF_DIR}/togogenome/ontology/GOLD/current/additional", '*.ttl', 'gold', name)
    update_graph('gold', name)
  end
end

#
# GMO
#

namespace :gmo do
  desc "Load GMO to TogoGenome"
  task :load do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/ontology/GMO/current/gmo.ttl", 'gmo', name)
    update_graph('gmo', name)
  end
end

end  # :ontology

###
### Genomes
###

namespace :genomes do
  desc "Retrieve genomes/current/GENOME_REPORTS"
  task :fetch do
    name = set_name
    path = create_subdir('genomes', name)
    #sh "cd #{path}; echo 'mirror GENOME_REPORTS' | lftp ftp://ftp.ncbi.nlm.nih.gov/genomes"
    sh "cd #{path}; echo 'mirror GENOME_REPORTS' | lftp ftp://ftp.hgc.jp/pub/mirror/ncbi/genomes"
    link_current('genomes', name)
  end
end

###
### RefSeq
###

namespace :refseq do
  desc "Retrieve RefSeq entries to refseq/current"
  task :fetch do
    name = set_name
    create_subdir("refseq", name)
    link_current("refseq", name)
    sh "bin/wget_prokaryotes.rb"
  end
  
  desc "Re-retrieve missing RefSeq entries"
  task :fetch_retry do
    sh "bin/wget_prokaryotes_retry.rb"
  end
  
  desc "Prepare RefSeq RDF for TogoGenome"
  task :prepare => [:refseq2ttl, :refseq2fasta, :refseq2jbrowse, :refseq2up]
  
  #desc "Convert RefSeq to Turtle"
  task :refseq2ttl do
    sh "bin/refseq2ttl_prokaryotes.rb 2> refseq/current/prokaryotes.log"
  end
  
  #desc "Convert RefSeq to FASTA"
  task :refseq2fasta do
    sh "bin/refseq2fasta.rb > refseq/current/prokaryotes.fasta"
  end
  
  #desc "Prepare JBrowse conf files"
  task :refseq2jbrowse do
    sh "cp -pr refseq/jbrowse refseq/current/jbrowse_upd"
    sh "bin/refseq2jbrowse.rb refseq/current/prokaryotes.fasta"
    sh "if [ -f refseq/current/jbrowse ]; then mv refseq/current/jbrowse refseq/current/jbrowse_old; fi"
    sh "mv refseq/current/jbrowse_upd refseq/current/jbrowse"
    sh "rm -rf refseq/current/jbrowse_old"
  end
  
  #desc "Link TogoGenome and UniProt by /db_xref="GI" extracted from RefSeq (prokaryotes.stats, prokaryotes.gi.tsv, prokaryotes.gi.ttl)"
  #task :refseq2gi do
  #  sh "bin/refseq2gi-phase1.rb refseq/current/prokaryotes.gb > refseq/current/prokaryotes.gi 2> refseq/current/prokaryotes.stats.json"
  #  sh "bin/refseq2gi-phase2.rb refseq/current/prokaryotes.gi ../uniprot/current/uniprot_unzip/idmapping.dat > refseq/current/prokaryotes.tax"
  #  sh "sort refseq/current/prokaryotes.gi.tsv > refseq/current/prokaryotes.gi.tsv.sort"
  #end
  
  #desc "Link TogoGenome and UniProt by /protein_id extracted from RefSeq"
  task :refseq2up => [:refseq2up1, :refseq2up2, :refseq2up3]
  task :refseq2up1 do
    # Generate prokaryotes.stats.ttl
    sh "bin/refseq2up-phase1.rb refseq/current/prokaryotes.gb > refseq/current/prokaryotes.up"
  end
  task :refseq2up2 do
    # Generate prokaryotes.up.ttl
    sh "bin/refseq2up-phase2.rb refseq/current/prokaryotes.up ../uniprot/current/uniprot_unzip/idmapping.dat"
  end
  task :refseq2up3 do
    sh "sort refseq/current/prokaryotes.up.tsv > refseq/current/prokaryotes.up.tsv.sort"
  end
  
  desc "Load Refseq to TogoGenome"
  task :load => [:load_refseq, :load_stats, :load_tgup, :load_tgtax]

  #desc "Load Refseq to TogoGenome"
  task :load_refseq do
    name = set_name
    load_dir("#{RDF_DIR}/togogenome/refseq/current/prokaryotes.ttl", '*.ttl', 'refseq', name)
    update_graph('refseq', name)
  end

  #desc "Load RefSeq statistics to TogoGenome"
  task :load_stats do
    name = set_name
    #load_dir("#{RDF_DIR}/togogenome/stats/current", '*.ttl', 'stats', name)
    load_ttl("#{RDF_DIR}/togogenome/refseq/current/prokaryotes.stats.ttl", 'stats', name)
    update_graph('stats', name)
  end

  #desc "Load TogoGenome to UniProt mappings"
  task :load_tgup do
    name = set_name
    load_ttl("#{RDF_DIR}/togogenome/refseq/current/prokaryotes.up.ttl", 'tgup', name)
    update_graph('tgup', name)
  end

  #desc "Load TogoGenome taxonomy to parent taxonomy mappings"
  task :load_tgtax do
    name = set_name
    #sh "SPARQL_ENDPOINT='#{ENDPOINT}' sparql.rb file bin/tgtax.rq | perl -pe 's/^s\t.*//' > #{RDF_DIR}/togogenome/refseq/current/prokaryotes.tax.ttl"
    sparql = "sparql
      PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
      DELETE FROM <#{GRAPH_NS}/graph/tgtax/> {
        ?s ?p ?o .
      }
      WHERE {
        GRAPH <#{GRAPH_NS}/graph/tgtax/> {
          ?s ?p ?o .
        }
      }
      INSERT INTO <#{GRAPH_NS}/graph/tgtax/> {
        ?tax rdfs:subClassOf ?parent .
      }
      FROM <#{GRAPH_NS}/graph/stats/>
      FROM <#{GRAPH_NS}/graph/taxonomy/>
      WHERE {
        {
          SELECT DISTINCT ?tax
          WHERE {
            GRAPH <#{GRAPH_NS}/graph/stats/> {
              ?tax rdfs:seeAlso ?xref
              FILTER (STRSTARTS(STR(?tax), 'http://identifiers.org/taxonomy/')) .
            }
          }
        }
        GRAPH <#{GRAPH_NS}/graph/taxonomy/> {
          #?tax rdfs:subClassOf+ ?parent .
          ?tax rdfs:subClassOf* ?parent .
        }
      }
    ;"
    isql = isql_create('tgtax', name)
    File.open(isql, "w") do |file|
      isql_write(file, sparql)
    end
    sh "#{ISQL} #{isql}"
    update_graph('tgtax', name)
  end
end

###
### UniProt
###

namespace :uniprot do
  desc "Retrieve UniProt RDF in ../uniprot/current"
  task :fetch do
    name = set_name
    path = create_subdir("#{RDF_DIR}/uniprot", name)
    #sh "cd #{path}; #{HTTP_GET} ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/idmapping/idmapping.dat.gz"
    sh "cd #{path}; #{HTTP_GET} ftp://ftp.hgc.jp/pub/mirror/uniprot/current_release/knowledgebase/idmapping/idmapping.dat.gz"
    #sh "cd #{path}; echo 'mirror rdf' | lftp ftp://ftp.uniprot.org:/pub/databases/uniprot/current_release"
    sh "cd #{path}; echo 'mirror rdf' | lftp ftp://ftp.hgc.jp/pub/mirror/uniprot/current_release"
    link_current("#{RDF_DIR}/uniprot", name)
    create_subdir('uniprot', name)
    link_current('uniprot', name)
  end
  
  desc "Prepare UniProt RDF for TogoGenome"
  #task :prepare => [:unzip, :rdf2taxon, :taxon2ttl, :copy, :copy_cyano]
  task :prepare => [:unzip, :rdf2taxon, :taxon2ttl, :copy]

  task :unzip do
    path = "#{RDF_DIR}/uniprot/current"
    sh "mkdir -p #{path}/uniprot_unzip"
    sh "cp -p #{path}/rdf/core.owl #{path}/uniprot_unzip"
    sh "cp -p #{path}/rdf/[a-t]*.rdf.gz #{path}/uniprot_unzip"
    sh "cp -p #{path}/idmapping.dat.gz #{path}/uniprot_unzip"
    sh "gunzip #{path}/uniprot_unzip/*.gz"
  end

  #desc "Split UniProt RDF into taxon files"
  task :rdf2taxon do
    sh "#{RDF_DIR}/uniprot/bin/uniprot_taxon.rb #{RDF_DIR}/uniprot/current/rdf/uniprot.rdf.gz #{RDF_DIR}/uniprot/current/uniprot_taxon.rdf"
  end
  
  #desc "Convert UniProt taxon RDF to Turtle"
  task :taxon2ttl do
    sh "#{RDF_DIR}/uniprot/bin/uniprot_rdf2ttl.rb #{RDF_DIR}/uniprot/current/uniprot_taxon.rdf #{RDF_DIR}/uniprot/current/uniprot_taxon.ttl"
  end
  
  #desc "Copy UniProt prokaryotes subset for TogoGenome"
  task :copy do
    sh "bin/copy_uniprot_prokaryotes.rb > uniprot/current/prokaryotes_missing.txt"
  end
  
  #desc "Copy UniProt cyanobacteria for TogoGenome"
  #task :copy_cyano do
  #  sh "SPARQL_ENDPOINT='#{ENDPOINT}' sparql.rb file bin/1117-narrowerTransitive.sparql > bin/1117-narrowerTransitive.txt"
  #  sh "ruby bin/1117-copy.rb bin/1117-narrowerTransitive.txt"
  #end
  
  desc "Load UniProt to TogoGenome"
  task :load do
    name = set_name
    load_dir("#{RDF_DIR}/uniprot/current/uniprot_unzip", '*.owl', 'uniprot', name)
    load_dir("#{RDF_DIR}/uniprot/current/uniprot_unzip", '*.rdf', 'uniprot', name)
    load_dir("#{RDF_DIR}/togogenome/uniprot/current/prokaryotes", '*.ttl', 'uniprot', name)
    update_graph('uniprot', name)
  end
end

###
### EdgeStore
###

namespace :edgestore do
  desc "Check EdgeStore data"
  task :check do
    sh "ssh w3sw@gw.ddbj.nig.ac.jp tail /home/w3sw/rdf/log/edgestore.log"
  end

  desc "Retrieve EdgeStore data"
  task :fetch do
    name = set_name
    path = create_subdir("#{RDF_DIR}/edgestore", name)
    sh "scp -pr w3sw@gw.ddbj.nig.ac.jp:/home/w3sw/rdf/log/edgestore.log #{RDF_DIR}/edgestore/"
    sh "scp -pr w3sw@gw.ddbj.nig.ac.jp:/home/w3sw/rdf/edgestore/\*.ttl #{path}"
    sh "rm -f #{path}/togogenome2uniprot.ttl"
    link_current("#{RDF_DIR}/edgestore", name)
  end
  
  desc "Load EdgeStore to TogoGenome"
  task :load do
    name = set_name
    load_dir("#{RDF_DIR}/edgestore/current", '*.ttl', 'edgestore', name)
    update_graph('edgestore', name)
  end
end

###
### Human
###

namespace :human do
  desc "Load Human genome to TogoGenome"
  task :fetch do
    sh "bin/wget_human.rb"
  end
  
  desc "Prepare Human genome RDF for TogoGenome"
  task :prepare do
    sh "bin/refseq2ttl_human.rb 2> refseq/current/human.log"
  end
  
  desc "Load Human genome to TogoGenome"
  task :load do
    name = set_name
    load_dir("#{RDF_DIR}/uniprot/current/uniprot_unzip", '*.owl', 'human', name)
    load_dir("#{RDF_DIR}/uniprot/current/uniprot_unzip", '*.rdf', 'human', name)
    load_ttl("#{RDF_DIR}/uniprot/current/uniprot_taxon.ttl/9000/9606.ttl", 'human', name)
    load_dir("#{RDF_DIR}/togogenome/refseq/current/human.ttl", '*.ttl', 'human', name)
    update_graph('human', name)
  end
end

